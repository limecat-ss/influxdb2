###############################################MODBUS TCP GERADOR HEIMER#################################################

# Retrieve data from MODBUS slave devices
[[inputs.modbus]]
  ## Connection Configuration
  ##
  ## Device name
  name = "heimer"

  name_override = "heimer"


  ## Slave ID - addresses a MODBUS device on the bus
  ## Range: 0 - 255 [0 = broadcast; 248 - 255 = reserved]
  slave_id = 10

  ## Timeout for each request
  timeout = "1s"

  ## Maximum number of retries and the time to wait between retries
  ## when a slave-device is busy.
  # busy_retries = 0
  # busy_retries_wait = "100ms"

  # TCP - connect via Modbus/TCP
  controller = "tcp://10.38.146.49:502"

  ## Serial (RS485; RS232)
  # controller = "file:///dev/ttyUSB0"
  # baud_rate = 9600
  # data_bits = 8
  # parity = "N"
  # stop_bits = 1

  ## For Modbus over TCP you can choose between "TCP", "RTUoverTCP" and "ASCIIoverTCP"
  ## default behaviour is "TCP" if the controller is TCP
  ## For Serial you can choose between "RTU" and "ASCII"
  # transmission_mode = "RTU"

  ## Trace the connection to the modbus device as debug messages
  ## Note: You have to enable telegraf's debug mode to see those messages!
  # debug_connection = false

  ## Define the configuration schema
  ##  |---register -- define fields per register type in the original style (only supports one slave ID)
  ##  |---request  -- define fields on a requests base
  configuration_type = "register"


  ## Analog Variables, Input Registers and Holding Registers
  ## measurement - the (optional) measurement name, defaults to "modbus"
  ## name        - the variable name
  ## byte_order  - the ordering of bytes
  ##  |---AB, ABCD   - Big Endian
  ##  |---BA, DCBA   - Little Endian
  ##  |---BADC       - Mid-Big Endian
  ##  |---CDAB       - Mid-Little Endian
  ## data_type   - INT16, UINT16, INT32, UINT32, INT64, UINT64,
  ##               FLOAT32-IEEE, FLOAT64-IEEE (the IEEE 754 binary representation)
  ##               FLOAT32, FIXED, UFIXED (fixed-point representation on input)
  ## scale       - the final numeric variable representation
  ## address     - variable address

  holding_registers = [
    { name = "Voltagem Bateria", byte_order = "AB",   data_type = "FLOAT32", scale=0.1,  address = [1029]},
    { name = "Mains L1-N voltage", byte_order = "ABCD",   data_type = "FLOAT32", scale=0.1,  address = [1060,1061]},
    { name = "Mains L2-N voltage", byte_order = "ABCD",   data_type = "FLOAT32", scale=0.1,  address = [1062,1063]},
    { name = "Mains L3-N voltage", byte_order = "ABCD",   data_type = "FLOAT32", scale=0.1,  address = [1064,1065]},
    { name = "Mains frequency", byte_order = "AB",   data_type = "FLOAT32", scale=0.1,  address = [1059]},
    { name = "Mains L1-L2 voltage", byte_order = "ABCD",   data_type = "FLOAT32", scale=0.1,  address = [1066,1067]},
    { name = "Mains L2-L3 voltage", byte_order = "ABCD",   data_type = "FLOAT32", scale=0.1,  address = [1068,1069]},
    { name = "Mains L3-L1 voltage", byte_order = "ABCD",   data_type = "FLOAT32", scale=0.1,  address = [1070,1071]},
    { name = "Number of starts", byte_order = "ABCD",   data_type = "INT32", scale=1.0,  address = [1808,1809]},
    { name = "Coolant temperature", byte_order = "AB",   data_type = "INT16", scale=1.0,  address = [1025]},
    { name = "Generator KVA hours", byte_order = "ABCD",   data_type = "FLOAT32", scale=0.1,  address = [1804,1805]},
    { name = "Generator KVAr hours", byte_order = "ABCD",   data_type = "FLOAT32", scale=0.1,  address = [1806,1807]},
    { name = "Engine run time", byte_order = "ABCD",   data_type = "INT32", scale=1.0,  address = [1798,1799]}, 
    { name = "Fuel level", byte_order = "AB",   data_type = "INT16", scale=1.0,  address = [1027]},
    { name = "Control mode", byte_order = "AB",   data_type = "INT16", scale=1.0,  address = [772]},
   

  ]
  
