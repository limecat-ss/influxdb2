[agent]
  hostname="serpro" 
  interval = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "1s"
  flush_jitter = "0s"
  precision = ""
  debug = false
  quiet = false


#INFLUXDB3
[[outputs.influxdb_v2]]

  urls = ["http://influxdb3:8181"]
  token = "${INFLUXDB3-TOKEN}"
  organization = ""
  bucket = "serpro"
  namepass = ["green","espurna"]

# USANDO BUCKET PARA SYSTEM ######################
[[outputs.influxdb_v2]]

  urls = ["http://influxdb:8086"]
  token = "${BUCKET_SYSTEM_TOKEN}"

  organization = "Serpro"

  bucket = "system"
  insecure_skip_verify = true
  namepass = ["cpu","mem","net","system"]



# USANDO BUCKET PARA SENSORES DO SERPRO ######################
[[outputs.influxdb_v2]]

  urls = ["http://influxdb:8086"]
  token = "${BUCKET_SENSORES_SERPRO}"

  organization = "Serpro"

  bucket = "telegraf-serpro-sensors"
  insecure_skip_verify = true
  namepass = ["green-serpro"]




# USANDO BUCKET PARA (90 DIAS) ######################
[[outputs.influxdb_v2]]

  urls = ["http://influxdb:8086"]
  token = "${BUCKET_90_DIAS_TOKEN}"

  organization = "Serpro"

  bucket = "telegraf-90d"
  insecure_skip_verify = true
  namepass = ["green","espurna"]


# USANDO BUCKET PARA (30 DIAS) ######################
[[outputs.influxdb_v2]]

  urls = ["http://influxdb:8086"]
  token = "${BUCKET_30_DIAS_TOKEN}"

  organization = "Serpro"

  bucket = "telegraf-30d"
  insecure_skip_verify = true
  namepass = ["pocos","nobreak-160Kva","nobreak-60Kva","nobreak-40Kva","uptime"]


# USANDO BUCKET PARA (7 DIAS) ######################
[[outputs.influxdb_v2]]

  urls = ["http://influxdb:8086"]
  token = "${BUCKET_07_DIAS_TOKEN}"

  organization = "Serpro"

  bucket = "telegraf-7d"
  insecure_skip_verify = true
  namepass = ["temperaturas","laser","sensores-string","sensores-float","zigbee","limecat"]

# USANDO BUCKET PARA (1 HORA) ###################
[[outputs.influxdb_v2]]

  urls = ["http://influxdb:8086"]
  token = "${BUCKET_01_HORA_TOKEN}"

  organization = "Serpro"
  bucket = "telegraf-1h"
  insecure_skip_verify = true
  namepass = ["compressores","chiller"]

####################### TIMESCALEDB ################################################

#[[outputs.postgresql]]
  #connection = "host=192.168.0.159 user=timescaledb password=password sslmode=disable dbname=serpro"
  #create_templates = [
  #  '''
  #  CREATE TABLE {{ .table }} ({{ .columns }});
  #  CREATE TABLE IF NOT EXISTS {TABLE}({COLUMNS}); 
  #  SELECT create_hypertable({TABLELITERAL},by_range('time', INTERVAL '1 week'),if_not_exists := true); 
  #  ''',
  #]



######################################### MQTT-CHILLER ##############################
[[inputs.mqtt_consumer]]

  name_override = "chiller"


  servers = ["tcp://10.31.147.100:1883"]

 ## Topics that will be subscribed to.
  topics = [
    "anexo2/chiller_status/status"

  ]

  client_id= 'telegraf-chiller'
  username='serpro'
  password='serpro832'


  data_format='value'
  data_type='integer'


###################################MQTT-TEMPERATURAS#############################

[[inputs.mqtt_consumer]]

  name_override = "temperaturas"
  ## Broker URLs for the MQTT server or cluster.  To connect to multiple

  servers = ["tcp://10.31.147.100:1883"]

  ## Topics that will be subscribed to.
  topics = [

    "+/+/+/temperatura",
    "+/+/temperatura",
    "+/temperatura"
   ]
  ## If unset, a random client ID will be generated.
  client_id = "telegraf-salas"

  ## Username and password to connect MQTT server.
  username = "serpro"
  password = "serpro832"

  data_format = "value"
  data_type = "float"

########################################## MQTT SENSORES FLOAT ################################################
[[inputs.mqtt_consumer]]

  name_override = "sensores-float"
  ## Broker URLs for the MQTT server or cluster.  To connect to multiple

  servers = ["tcp://10.31.147.100:1883"]

  ## Topics that will be subscribed to.
  topics = [

    "+/+/vcc",
    "+/+/uptime",
    "+/+/status",
    "+/+/loadavg"
   ]
  ## If unset, a random client ID will be generated.
  client_id = "telegraf-sensores-float"

  ## Username and password to connect MQTT server.
  username = "serpro"
  password = "serpro832"

  data_format = "value"
  data_type = "float"

########################################## MQTT SENSORES STRING ################################################
[[inputs.mqtt_consumer]]

  name_override = "sensores-string"
  ## Broker URLs for the MQTT server or cluster.  To connect to multiple

  servers = ["tcp://10.31.147.100:1883"]

  ## Topics that will be subscribed to.
  topics = [

    "+/+/host",
    "+/+/ip",
    "+/+/mac",
    "+/+/app",
    "+/+/version",
    "+/+/board",
    "status/alarme/+",
    "status/alarme/full"
   ]
  ## If unset, a random client ID will be generated.
  client_id = "telegraf-sensores-string"

  ## Username and password to connect MQTT server.
  username = "serpro"
  password = "serpro832"

  data_format = "value"
  data_type = "string"

 
################################################ GRAFANA REAL-TIME ###################################################



[[outputs.http]]

 namepass = ["portas","compressores","pocos","chiller","zigbee"]
  url = "http://10.38.146.30:3000/api/live/push/telegraf"
  data_format = "influx"
  [outputs.http.headers]
    Authorization = "${GRAFANA_REALTIME_HTTP}"


[[outputs.websocket]]
 namepass=["sensores-string"]
  url = "ws://10.38.146.30:3000/api/live/push/telegraf"
  data_format = "influx"
  [outputs.websocket.headers]
     Authorization = "${GRAFANA_REALTIME_WEBSOCKET}"


######################################################## SYSTEM ###########################################################

[[inputs.cpu]]
  ## Whether to report per-cpu stats or not
  percpu = true
  ## Whether to report total system cpu stats or not
  totalcpu = true
  ## If true, collect raw CPU time metrics
  collect_cpu_time = false
  ## If true, compute and report the sum of all non-idle CPU states
  report_active = false

[[inputs.disk]]
  ## By default stats will be gathered for all mount points. Set mount_points will restrict the stats to only the specified mount points.
  # mount_points = ["/"]
  ## Ignore mount points by filesystem type.
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]

[[inputs.diskio]]
  ## By default, telegraf will gather stats for all devices including disk partitions. Setting devices will restrict the stats to the specified devices.

[[inputs.mem]]
  # no configuration
[[inputs.net]]
  ## By default, telegraf gathers stats from any up interface (excluding loopback) Setting interfaces will tell it to gather these explicit interfaces, 
 
[[inputs.system]]
  # no configuration
 
 

